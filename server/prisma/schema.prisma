generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("admins_table")
}

model student {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  studentclass String
  password     String
  teacherId    String?  
  teacher      teacher? @relation(fields: [teacherId], references: [id], name: "TeacherStudents")
  grades       grade[]  @relation("StudentGrades")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  submittedAssignments SubmittedAssignment[]
  @@map("students_table")
}

model teacher {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  teachersclass String
  subject      String
  password     String
  students     student[]  @relation("TeacherStudents")
  grades       grade[]    @relation("TeacherGrades")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@map("teachers_table")
}

model grade {
  id          String   @id @default(uuid())
  studentId   String
  teacherId   String
  subject     String
  marks       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  student     student  @relation(fields: [studentId], references: [id], name: "StudentGrades")
  teacher     teacher  @relation(fields: [teacherId], references: [id], name: "TeacherGrades")
  
  @@map("grades_table")
}

model Assignments {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("assignments_table")
}

model Announcements {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("announcements_table")
}

model Class {
  id           String   @id @default(uuid())
  className    String
  classTeacher String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@map("classes_table")
}
model SubmittedAssignment {
  id          String   @id @default(uuid())
  title       String
  content     String
  fileUrl     String
  studentId   String?
  student     student?  @relation(fields: [studentId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("submitted_assignments_table")
}

